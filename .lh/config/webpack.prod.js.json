{
    "sourceFile": "config/webpack.prod.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1662358129957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1662358380416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,177 +1,173 @@\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: Leojias\r\n- * @Date: 2022-09-04 04:06:02\r\n- * @LastEditors: Leojias\r\n- * @LastEditTime: 2022-09-05 14:08:49\r\n- * \r\n- */\r\n+\r\n const path = require(\"path\");\r\n const ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\n const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\n-const ReactRefreshWebpackPlugin = require(\"@pmmmwh/react-refresh-webpack-plugin\");\r\n-// const CopyPlugin = require(\"copy-webpack-plugin\");\r\n const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\n const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n-\r\n+const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n+const CopyPlugin = require(\"copy-webpack-plugin\");\r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n   return [\r\n-    //style-loader插件\r\n     MiniCssExtractPlugin.loader,\r\n     \"css-loader\",\r\n     {\r\n       loader: \"postcss-loader\",\r\n       options: {\r\n         postcssOptions: {\r\n           plugins: [\r\n-            // 在package.json里配置browserslist能解决大多数样式兼容性问题\r\n-            \"postcss-preset-env\", \r\n+            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\r\n           ],\r\n         },\r\n       },\r\n     },\r\n     preProcessor,\r\n   ].filter(Boolean);\r\n };\r\n+\r\n module.exports = {\r\n-    entry: \"./src/main.js\",\r\n-    output: {\r\n-      path: path.resolve(__dirname, \"../dist\"),\r\n-      //入口文件目录\r\n-      filename:\"static/js/[name].[contenthash:10].js\",\r\n-      //打包chunk目录动态导入的语法\r\n-      chunkFilename: \"static/js/[name].chunk.js\",\r\n-      //图片的目录\r\n-      assetModuleFilename: \"static/js/[hash:10][ext][query]\",\r\n-      //上一次打包清空掉\r\n-      clean: true,\r\n-\r\n-    },\r\n-    module: {\r\n-        rules: [\r\n+  //入口\r\n+  entry: \"./src/main.js\",\r\n+  //出口\r\n+  output: {\r\n+    path: path.resolve(__dirname, \"../dist\"),\r\n+    filename: \"static/js/[name].[contenthash:10].js\",\r\n+    chunkFilename: \"static/js/[name].[contenthash:10].chunk.js\",\r\n+    assetModuleFilename: \"static/js/[hash:10][ext][query]\",\r\n+    clean: true,\r\n+  },\r\n+  module: {\r\n+    rules: [\r\n+      {\r\n+        oneOf: [\r\n           {\r\n-            oneOf: [\r\n-              {\r\n-                // 用来匹配 .css 结尾的文件\r\n-                test: /\\.css$/,\r\n-                // use 数组里面 Loader 执行顺序是从右到左\r\n-                use: getStyleLoaders(),\r\n+            // 用来匹配 .css 结尾的文件\r\n+            test: /\\.css$/,\r\n+            // use 数组里面 Loader 执行顺序是从右到左\r\n+            use: getStyleLoaders(),\r\n+          },\r\n+          {\r\n+            test: /\\.less$/,\r\n+            use: getStyleLoaders(\"less-loader\"),\r\n+          },\r\n+          {\r\n+            test: /\\.s[ac]ss$/,\r\n+            use: getStyleLoaders(\"sass-loader\"),\r\n+          },\r\n+          {\r\n+            test: /\\.styl$/,\r\n+            use: getStyleLoaders(\"stylus-loader\"),\r\n+          },\r\n+          {\r\n+            test: /\\.(png|jpe?g|gif|svg)$/,\r\n+            type: \"asset\",\r\n+            parser: {\r\n+              dataUrlCondition: {\r\n+                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\r\n               },\r\n-              //less\r\n-              {\r\n-                test: /\\.less$/,\r\n-                use: getStyleLoaders(\"less-loader\"),\r\n-              },\r\n-              //sacc\r\n-              {\r\n-                test: /\\.s[ac]ss$/,\r\n-                use: getStyleLoaders(\"sass-loader\"),\r\n-              },\r\n-              //stylus\r\n-              {\r\n-                test: /\\.styl$/,\r\n-                use: getStyleLoaders(\"stylus-loader\"),\r\n-              },\r\n-              //图片\r\n-              {\r\n-                test: /\\.(png|jpe?g|gif|svg)$/,\r\n-                type: \"asset\",\r\n-                //对图片优化\r\n-                parser: {\r\n-                  dataUrlCondition: {\r\n-                    maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\r\n-                  },\r\n-                },\r\n-              },\r\n-              //其他资源\r\n-              {\r\n-                test: /\\.(ttf|woff2?)$/,\r\n-                type: \"asset/resource\",\r\n-              },\r\n-              //babel-loader处理js\r\n-              {\r\n-                test: /\\.(jsx|js)$/,\r\n-                include: path.resolve(__dirname, \"../src\"),\r\n-                loader: \"babel-loader\",\r\n-                options: {\r\n-                  //开启缓存\r\n-                  cacheDirectory: true,\r\n-                  //不压缩\r\n-                  cacheCompression: false,\r\n+            },\r\n+          },\r\n+          {\r\n+            test: /\\.(ttf|woff2?)$/,\r\n+            type: \"asset/resource\",\r\n+          },\r\n+          {\r\n+            test: /\\.(jsx|js)$/,\r\n+            include: path.resolve(__dirname, \"../src\"),\r\n+            loader: \"babel-loader\",\r\n+            options: {\r\n+              cacheDirectory: true,\r\n+              cacheCompression: false,\r\n+              plugins: [\r\n+                // \"@babel/plugin-transform-runtime\" // presets中包含了\r\n+              ],\r\n+            },\r\n+          },\r\n+        ],\r\n+      },\r\n+    ],\r\n+  },\r\n+  plugins: [\r\n+    new ESLintWebpackPlugin({\r\n+      context: path.resolve(__dirname, \"../src\"),\r\n+      exclude: \"node_modules\",\r\n+      cache: true,\r\n+      cacheLocation: path.resolve(\r\n+        __dirname,\r\n+        \"../node_modules/.cache/.eslintcache\"\r\n+      ),\r\n+    }),\r\n\\ No newline at end of file\n+    new HtmlWebpackPlugin({\r\n+      template: path.resolve(__dirname, \"../public/index.html\"),\r\n+    }),\r\n+    new MiniCssExtractPlugin({\r\n+      filename: \"static/css/[name].[contenthash:10].css\",\r\n+      chunkFilename: \"static/css/[name].[contenthash:10].chunk.css\",\r\n+    }),\r\n+    // 将public下面的资源复制到dist目录去（除了index.html）\r\n+    new CopyPlugin({\r\n+      patterns: [\r\n+        {\r\n+          from: path.resolve(__dirname, \"../public\"),\r\n+          to: path.resolve(__dirname, \"../dist\"),\r\n+          toType: \"dir\",\r\n+          noErrorOnMissing: true, // 不生成错误\r\n+          globOptions: {\r\n+            // 忽略文件\r\n+            ignore: [\"**/index.html\"],\r\n+          },\r\n+          info: {\r\n+            // 跳过terser压缩js\r\n+            minimized: true,\r\n+          },\r\n+        },\r\n+      ],\r\n+    }),\r\n+  ],\r\n+  optimization: {\r\n+    // 压缩的操作\r\n+    minimizer: [\r\n+      new CssMinimizerPlugin(),\r\n+      new TerserWebpackPlugin(),\r\n+      new ImageMinimizerPlugin({\r\n+        minimizer: {\r\n+          implementation: ImageMinimizerPlugin.imageminGenerate,\r\n+          options: {\r\n+            plugins: [\r\n+              [\"gifsicle\", { interlaced: true }],\r\n+              [\"jpegtran\", { progressive: true }],\r\n+              [\"optipng\", { optimizationLevel: 5 }],\r\n+              [\r\n+                \"svgo\",\r\n+                {\r\n                   plugins: [\r\n-                    // \"@babel/plugin-transform-runtime\", // presets中包含了\r\n-                    \"react-refresh/babel\", // 开启js的HMR功能\r\n+                    \"preset-default\",\r\n+                    \"prefixIds\",\r\n+                    {\r\n+                      name: \"sortAttrs\",\r\n+                      params: {\r\n+                        xmlnsOrder: \"alphabetical\",\r\n+                      },\r\n+                    },\r\n                   ],\r\n                 },\r\n-              },\r\n+              ],\r\n             ],\r\n           },\r\n-        ],\r\n-      },\r\n-      plugins: [\r\n-        //eslint插件\r\n-        new ESLintWebpackPlugin({\r\n-          context: path.resolve(__dirname, \"../src\"),\r\n-          //排除node_module\r\n-          exclude: \"node_modules\",\r\n-          //开启缓存让第二次打包更好\r\n-          cache: true,\r\n-          cacheLocation: path.resolve(\r\n-            __dirname,\r\n-            \"../node_modules/.cache/.eslintcache\"\r\n-          ),\r\n-        }),\r\n-        //html插件\r\n-        new HtmlWebpackPlugin({\r\n-          template: path.resolve(__dirname, \"../public/index.html\"),\r\n-        }),\r\n-        new ReactRefreshWebpackPlugin(), // 解决js的HMR功能运行时全局变量的问题\r\n-        // // 将public下面的资源复制到dist目录去（除了index.html）\r\n-        // new CopyPlugin({\r\n-        //   patterns: [\r\n-        //     {\r\n-        //       from: path.resolve(__dirname, \"../public\"),\r\n-        //       to: path.resolve(__dirname, \"../dist\"),\r\n-        //       toType: \"dir\",\r\n-        //       noErrorOnMissing: true, // 不生成错误\r\n-        //       globOptions: {\r\n-        //         // 忽略文件\r\n-        //         ignore: [\"**/index.html\"],\r\n-        //       },\r\n-        //       info: {\r\n-        //         // 跳过terser压缩js\r\n-        //         minimized: true,\r\n-        //       },\r\n-        //     },\r\n-        //   ],\r\n-        // }),\r\n-      ],\r\n-      //分包\r\n-      optimization: {\r\n-        splitChunks: {\r\n-          chunks: \"all\",\r\n         },\r\n-        //为了防止拆包失效\r\n-        runtimeChunk: {\r\n-          name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n-        },\r\n-      },\r\n-      //webpack解析模块加载选项\r\n-      resolve: {\r\n-        extensions: [\".jsx\", \".js\", \".json\"], // 自动补全文件扩展名，让jsx可以使用\r\n-      },\r\n-      //热更新\r\n-      devServer: {\r\n-        open: true,\r\n-        host: \"localhost\",\r\n-        port: 3000,\r\n-        hot: true,\r\n-        compress: true,\r\n-        historyApiFallback: true, // 解决react-router刷新404问题\r\n-      },\r\n-      mode: \"development\",\r\n-      devtool: \"cheap-module-source-map\",\r\n-}\n+      }),\r\n+    ],\r\n+    splitChunks: {\r\n+      chunks: \"all\",\r\n+    },\r\n+    runtimeChunk: {\r\n+      name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n+    },\r\n+  },\r\n+  resolve: {\r\n+    extensions: [\".jsx\", \".js\", \".json\"],\r\n+  },\r\n+  mode: \"production\",\r\n+  devtool: \"source-map\",\r\n+};\r\n"
                },
                {
                    "date": 1662358484547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,16 @@\n const path = require(\"path\");\r\n const ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\n const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\n const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\n+//压缩js\r\n const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n+//压缩css\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n+//压缩图片\r\n const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n const CopyPlugin = require(\"copy-webpack-plugin\");\r\n+\r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n   return [\r\n     MiniCssExtractPlugin.loader,\r\n@@ -169,5 +173,5 @@\n     extensions: [\".jsx\", \".js\", \".json\"],\r\n   },\r\n   mode: \"production\",\r\n   devtool: \"source-map\",\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1662358565452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n \r\n const path = require(\"path\");\r\n+//eslint插件\r\n const ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\n+//html插件\r\n const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\n+//样式插件\r\n const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\n //压缩js\r\n const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n //压缩css\r\n"
                },
                {
                    "date": 1662358600904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,9 @@\n   ].filter(Boolean);\r\n };\r\n \r\n module.exports = {\r\n-  //入口\r\n   entry: \"./src/main.js\",\r\n-  //出口\r\n   output: {\r\n     path: path.resolve(__dirname, \"../dist\"),\r\n     filename: \"static/js/[name].[contenthash:10].js\",\r\n     chunkFilename: \"static/js/[name].[contenthash:10].chunk.js\",\r\n"
                },
                {
                    "date": 1662358649130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n           {\r\n             test: /\\.(ttf|woff2?)$/,\r\n             type: \"asset/resource\",\r\n           },\r\n+          //babel-loader\r\n           {\r\n             test: /\\.(jsx|js)$/,\r\n             include: path.resolve(__dirname, \"../src\"),\r\n             loader: \"babel-loader\",\r\n"
                },
                {
                    "date": 1662362062376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n //压缩css\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n //压缩图片\r\n-const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n+// const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n const CopyPlugin = require(\"copy-webpack-plugin\");\r\n \r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n@@ -139,28 +139,28 @@\n       new ImageMinimizerPlugin({\r\n         minimizer: {\r\n           implementation: ImageMinimizerPlugin.imageminGenerate,\r\n           options: {\r\n-            plugins: [\r\n-              [\"gifsicle\", { interlaced: true }],\r\n-              [\"jpegtran\", { progressive: true }],\r\n-              [\"optipng\", { optimizationLevel: 5 }],\r\n-              [\r\n-                \"svgo\",\r\n-                {\r\n-                  plugins: [\r\n-                    \"preset-default\",\r\n-                    \"prefixIds\",\r\n-                    {\r\n-                      name: \"sortAttrs\",\r\n-                      params: {\r\n-                        xmlnsOrder: \"alphabetical\",\r\n-                      },\r\n-                    },\r\n-                  ],\r\n-                },\r\n-              ],\r\n-            ],\r\n+            // plugins: [\r\n+            //   [\"gifsicle\", { interlaced: true }],\r\n+            //   [\"jpegtran\", { progressive: true }],\r\n+            //   [\"optipng\", { optimizationLevel: 5 }],\r\n+            //   [\r\n+            //     \"svgo\",\r\n+            //     {\r\n+            //       plugins: [\r\n+            //         \"preset-default\",\r\n+            //         \"prefixIds\",\r\n+            //         {\r\n+            //           name: \"sortAttrs\",\r\n+            //           params: {\r\n+            //             xmlnsOrder: \"alphabetical\",\r\n+            //           },\r\n+            //         },\r\n+            //       ],\r\n+            //     },\r\n+            //   ],\r\n+            // ],\r\n           },\r\n         },\r\n       }),\r\n     ],\r\n"
                },
                {
                    "date": 1662362155953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n //压缩css\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n //压缩图片\r\n // const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n-const CopyPlugin = require(\"copy-webpack-plugin\");\r\n+// const CopyPlugin = require(\"copy-webpack-plugin\");\r\n \r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n   return [\r\n"
                },
                {
                    "date": 1662362180820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,26 +111,26 @@\n       filename: \"static/css/[name].[contenthash:10].css\",\r\n       chunkFilename: \"static/css/[name].[contenthash:10].chunk.css\",\r\n     }),\r\n     // 将public下面的资源复制到dist目录去（除了index.html）\r\n-    new CopyPlugin({\r\n-      patterns: [\r\n-        {\r\n-          from: path.resolve(__dirname, \"../public\"),\r\n-          to: path.resolve(__dirname, \"../dist\"),\r\n-          toType: \"dir\",\r\n-          noErrorOnMissing: true, // 不生成错误\r\n-          globOptions: {\r\n-            // 忽略文件\r\n-            ignore: [\"**/index.html\"],\r\n-          },\r\n-          info: {\r\n-            // 跳过terser压缩js\r\n-            minimized: true,\r\n-          },\r\n-        },\r\n-      ],\r\n-    }),\r\n+    // new CopyPlugin({\r\n+    //   patterns: [\r\n+    //     {\r\n+    //       from: path.resolve(__dirname, \"../public\"),\r\n+    //       to: path.resolve(__dirname, \"../dist\"),\r\n+    //       toType: \"dir\",\r\n+    //       noErrorOnMissing: true, // 不生成错误\r\n+    //       globOptions: {\r\n+    //         // 忽略文件\r\n+    //         ignore: [\"**/index.html\"],\r\n+    //       },\r\n+    //       info: {\r\n+    //         // 跳过terser压缩js\r\n+    //         minimized: true,\r\n+    //       },\r\n+    //     },\r\n+    //   ],\r\n+    // }),\r\n   ],\r\n   optimization: {\r\n     // 压缩的操作\r\n     minimizer: [\r\n"
                },
                {
                    "date": 1662362525229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n //压缩css\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n //压缩图片\r\n-// const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n+const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n // const CopyPlugin = require(\"copy-webpack-plugin\");\r\n \r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n"
                },
                {
                    "date": 1662362540674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,28 +139,28 @@\n       new ImageMinimizerPlugin({\r\n         minimizer: {\r\n           implementation: ImageMinimizerPlugin.imageminGenerate,\r\n           options: {\r\n-            // plugins: [\r\n-            //   [\"gifsicle\", { interlaced: true }],\r\n-            //   [\"jpegtran\", { progressive: true }],\r\n-            //   [\"optipng\", { optimizationLevel: 5 }],\r\n-            //   [\r\n-            //     \"svgo\",\r\n-            //     {\r\n-            //       plugins: [\r\n-            //         \"preset-default\",\r\n-            //         \"prefixIds\",\r\n-            //         {\r\n-            //           name: \"sortAttrs\",\r\n-            //           params: {\r\n-            //             xmlnsOrder: \"alphabetical\",\r\n-            //           },\r\n-            //         },\r\n-            //       ],\r\n-            //     },\r\n-            //   ],\r\n-            // ],\r\n+            plugins: [\r\n+              [\"gifsicle\", { interlaced: true }],\r\n+              [\"jpegtran\", { progressive: true }],\r\n+              [\"optipng\", { optimizationLevel: 5 }],\r\n+              [\r\n+                \"svgo\",\r\n+                {\r\n+                  plugins: [\r\n+                    \"preset-default\",\r\n+                    \"prefixIds\",\r\n+                    {\r\n+                      name: \"sortAttrs\",\r\n+                      params: {\r\n+                        xmlnsOrder: \"alphabetical\",\r\n+                      },\r\n+                    },\r\n+                  ],\r\n+                },\r\n+              ],\r\n+            ],\r\n           },\r\n         },\r\n       }),\r\n     ],\r\n"
                },
                {
                    "date": 1662370171976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n //压缩css\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n //压缩图片\r\n const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n-// const CopyPlugin = require(\"copy-webpack-plugin\");\r\n+const CopyPlugin = require(\"copy-webpack-plugin\");\r\n \r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n   return [\r\n"
                },
                {
                    "date": 1662370223365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n //压缩css\r\n const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n //压缩图片\r\n const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n+//复制 将public下面的资源复制到dist目录去（除了index.html）\r\n const CopyPlugin = require(\"copy-webpack-plugin\");\r\n \r\n //提取公共部分style-loader和css-loader并做了postcss兼容\r\n const getStyleLoaders = (preProcessor) => {\r\n"
                },
                {
                    "date": 1662370235289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,26 +112,26 @@\n       filename: \"static/css/[name].[contenthash:10].css\",\r\n       chunkFilename: \"static/css/[name].[contenthash:10].chunk.css\",\r\n     }),\r\n     // 将public下面的资源复制到dist目录去（除了index.html）\r\n-    // new CopyPlugin({\r\n-    //   patterns: [\r\n-    //     {\r\n-    //       from: path.resolve(__dirname, \"../public\"),\r\n-    //       to: path.resolve(__dirname, \"../dist\"),\r\n-    //       toType: \"dir\",\r\n-    //       noErrorOnMissing: true, // 不生成错误\r\n-    //       globOptions: {\r\n-    //         // 忽略文件\r\n-    //         ignore: [\"**/index.html\"],\r\n-    //       },\r\n-    //       info: {\r\n-    //         // 跳过terser压缩js\r\n-    //         minimized: true,\r\n-    //       },\r\n-    //     },\r\n-    //   ],\r\n-    // }),\r\n+    new CopyPlugin({\r\n+      patterns: [\r\n+        {\r\n+          from: path.resolve(__dirname, \"../public\"),\r\n+          to: path.resolve(__dirname, \"../dist\"),\r\n+          toType: \"dir\",\r\n+          noErrorOnMissing: true, // 不生成错误\r\n+          globOptions: {\r\n+            // 忽略文件\r\n+            ignore: [\"**/index.html\"],\r\n+          },\r\n+          info: {\r\n+            // 跳过terser压缩js\r\n+            minimized: true,\r\n+          },\r\n+        },\r\n+      ],\r\n+    }),\r\n   ],\r\n   optimization: {\r\n     // 压缩的操作\r\n     minimizer: [\r\n"
                },
                {
                    "date": 1662370857570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-\r\n+//生产环境\r\n const path = require(\"path\");\r\n //eslint插件\r\n const ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\n //html插件\r\n"
                }
            ],
            "date": 1662358129957,
            "name": "Commit-0",
            "content": "/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: Leojias\r\n * @Date: 2022-09-04 04:06:02\r\n * @LastEditors: Leojias\r\n * @LastEditTime: 2022-09-05 14:08:49\r\n * \r\n */\r\nconst path = require(\"path\");\r\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\nconst ReactRefreshWebpackPlugin = require(\"@pmmmwh/react-refresh-webpack-plugin\");\r\n// const CopyPlugin = require(\"copy-webpack-plugin\");\r\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\nconst TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n\r\n//提取公共部分style-loader和css-loader并做了postcss兼容\r\nconst getStyleLoaders = (preProcessor) => {\r\n  return [\r\n    //style-loader插件\r\n    MiniCssExtractPlugin.loader,\r\n    \"css-loader\",\r\n    {\r\n      loader: \"postcss-loader\",\r\n      options: {\r\n        postcssOptions: {\r\n          plugins: [\r\n            // 在package.json里配置browserslist能解决大多数样式兼容性问题\r\n            \"postcss-preset-env\", \r\n          ],\r\n        },\r\n      },\r\n    },\r\n    preProcessor,\r\n  ].filter(Boolean);\r\n};\r\nmodule.exports = {\r\n    entry: \"./src/main.js\",\r\n    output: {\r\n      path: path.resolve(__dirname, \"../dist\"),\r\n      //入口文件目录\r\n      filename:\"static/js/[name].[contenthash:10].js\",\r\n      //打包chunk目录动态导入的语法\r\n      chunkFilename: \"static/js/[name].chunk.js\",\r\n      //图片的目录\r\n      assetModuleFilename: \"static/js/[hash:10][ext][query]\",\r\n      //上一次打包清空掉\r\n      clean: true,\r\n\r\n    },\r\n    module: {\r\n        rules: [\r\n          {\r\n            oneOf: [\r\n              {\r\n                // 用来匹配 .css 结尾的文件\r\n                test: /\\.css$/,\r\n                // use 数组里面 Loader 执行顺序是从右到左\r\n                use: getStyleLoaders(),\r\n              },\r\n              //less\r\n              {\r\n                test: /\\.less$/,\r\n                use: getStyleLoaders(\"less-loader\"),\r\n              },\r\n              //sacc\r\n              {\r\n                test: /\\.s[ac]ss$/,\r\n                use: getStyleLoaders(\"sass-loader\"),\r\n              },\r\n              //stylus\r\n              {\r\n                test: /\\.styl$/,\r\n                use: getStyleLoaders(\"stylus-loader\"),\r\n              },\r\n              //图片\r\n              {\r\n                test: /\\.(png|jpe?g|gif|svg)$/,\r\n                type: \"asset\",\r\n                //对图片优化\r\n                parser: {\r\n                  dataUrlCondition: {\r\n                    maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\r\n                  },\r\n                },\r\n              },\r\n              //其他资源\r\n              {\r\n                test: /\\.(ttf|woff2?)$/,\r\n                type: \"asset/resource\",\r\n              },\r\n              //babel-loader处理js\r\n              {\r\n                test: /\\.(jsx|js)$/,\r\n                include: path.resolve(__dirname, \"../src\"),\r\n                loader: \"babel-loader\",\r\n                options: {\r\n                  //开启缓存\r\n                  cacheDirectory: true,\r\n                  //不压缩\r\n                  cacheCompression: false,\r\n                  plugins: [\r\n                    // \"@babel/plugin-transform-runtime\", // presets中包含了\r\n                    \"react-refresh/babel\", // 开启js的HMR功能\r\n                  ],\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      plugins: [\r\n        //eslint插件\r\n        new ESLintWebpackPlugin({\r\n          context: path.resolve(__dirname, \"../src\"),\r\n          //排除node_module\r\n          exclude: \"node_modules\",\r\n          //开启缓存让第二次打包更好\r\n          cache: true,\r\n          cacheLocation: path.resolve(\r\n            __dirname,\r\n            \"../node_modules/.cache/.eslintcache\"\r\n          ),\r\n        }),\r\n        //html插件\r\n        new HtmlWebpackPlugin({\r\n          template: path.resolve(__dirname, \"../public/index.html\"),\r\n        }),\r\n        new ReactRefreshWebpackPlugin(), // 解决js的HMR功能运行时全局变量的问题\r\n        // // 将public下面的资源复制到dist目录去（除了index.html）\r\n        // new CopyPlugin({\r\n        //   patterns: [\r\n        //     {\r\n        //       from: path.resolve(__dirname, \"../public\"),\r\n        //       to: path.resolve(__dirname, \"../dist\"),\r\n        //       toType: \"dir\",\r\n        //       noErrorOnMissing: true, // 不生成错误\r\n        //       globOptions: {\r\n        //         // 忽略文件\r\n        //         ignore: [\"**/index.html\"],\r\n        //       },\r\n        //       info: {\r\n        //         // 跳过terser压缩js\r\n        //         minimized: true,\r\n        //       },\r\n        //     },\r\n        //   ],\r\n        // }),\r\n      ],\r\n      //分包\r\n      optimization: {\r\n        splitChunks: {\r\n          chunks: \"all\",\r\n        },\r\n        //为了防止拆包失效\r\n        runtimeChunk: {\r\n          name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n        },\r\n      },\r\n      //webpack解析模块加载选项\r\n      resolve: {\r\n        extensions: [\".jsx\", \".js\", \".json\"], // 自动补全文件扩展名，让jsx可以使用\r\n      },\r\n      //热更新\r\n      devServer: {\r\n        open: true,\r\n        host: \"localhost\",\r\n        port: 3000,\r\n        hot: true,\r\n        compress: true,\r\n        historyApiFallback: true, // 解决react-router刷新404问题\r\n      },\r\n      mode: \"development\",\r\n      devtool: \"cheap-module-source-map\",\r\n}"
        }
    ]
}