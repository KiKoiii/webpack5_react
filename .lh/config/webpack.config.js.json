{
    "sourceFile": "config/webpack.config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1662370960843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1662387025371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,177 +1,1 @@\n-//合并开发和生产环境，并进行了优化，加了antd\r\n-const path = require(\"path\");\r\n-const ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\n-const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\n-const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\n-const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n-const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n-const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n-const ReactRefreshWebpackPlugin = require(\"@pmmmwh/react-refresh-webpack-plugin\");\r\n-\r\n-// 需要通过 cross-env 定义环境变量\r\n-const isProduction = process.env.NODE_ENV === \"production\";\r\n-\r\n-const getStyleLoaders = (preProcessor) => {\r\n-  return [\r\n-    isProduction ? MiniCssExtractPlugin.loader : \"style-loader\",\r\n-    \"css-loader\",\r\n-    {\r\n-      loader: \"postcss-loader\",\r\n-      options: {\r\n-        postcssOptions: {\r\n-          plugins: [\r\n-            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\r\n-          ],\r\n-        },\r\n-      },\r\n-    },\r\n-    preProcessor,\r\n-  ].filter(Boolean);\r\n-};\r\n-\r\n-module.exports = {\r\n-  entry: \"./src/main.js\",\r\n-  output: {\r\n-    path: isProduction ? path.resolve(__dirname, \"../dist\") : undefined,\r\n-    filename: isProduction\r\n-      ? \"static/js/[name].[contenthash:10].js\"\r\n-      : \"static/js/[name].js\",\r\n-    chunkFilename: isProduction\r\n-      ? \"static/js/[name].[contenthash:10].chunk.js\"\r\n-      : \"static/js/[name].chunk.js\",\r\n-    assetModuleFilename: \"static/js/[hash:10][ext][query]\",\r\n-    clean: true,\r\n-  },\r\n-  module: {\r\n-    rules: [\r\n-      {\r\n-        oneOf: [\r\n-          {\r\n-            // 用来匹配 .css 结尾的文件\r\n-            test: /\\.css$/,\r\n-            // use 数组里面 Loader 执行顺序是从右到左\r\n-            use: getStyleLoaders(),\r\n-          },\r\n-          {\r\n-            test: /\\.less$/,\r\n-            use: getStyleLoaders(\"less-loader\"),\r\n-          },\r\n-          {\r\n-            test: /\\.s[ac]ss$/,\r\n-            use: getStyleLoaders(\"sass-loader\"),\r\n-          },\r\n-          {\r\n-            test: /\\.styl$/,\r\n-            use: getStyleLoaders(\"stylus-loader\"),\r\n-          },\r\n-          {\r\n-            test: /\\.(png|jpe?g|gif|svg)$/,\r\n-            type: \"asset\",\r\n-            parser: {\r\n-              dataUrlCondition: {\r\n-                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\r\n-              },\r\n-            },\r\n-          },\r\n-          {\r\n-            test: /\\.(ttf|woff2?)$/,\r\n-            type: \"asset/resource\",\r\n-          },\r\n-          {\r\n-            test: /\\.(jsx|js)$/,\r\n-            include: path.resolve(__dirname, \"../src\"),\r\n-            loader: \"babel-loader\",\r\n-            options: {\r\n-              cacheDirectory: true, // 开启babel编译缓存\r\n-              cacheCompression: false, // 缓存文件不要压缩\r\n-              plugins: [\r\n-                // \"@babel/plugin-transform-runtime\",  // presets中包含了\r\n-                !isProduction && \"react-refresh/babel\",\r\n-              ].filter(Boolean),\r\n-            },\r\n-          },\r\n-        ],\r\n-      },\r\n-    ],\r\n-  },\r\n-  plugins: [\r\n-    new ESLintWebpackPlugin({\r\n-      extensions: [\".js\", \".jsx\"],\r\n-      context: path.resolve(__dirname, \"../src\"),\r\n-      exclude: \"node_modules\",\r\n-      cache: true,\r\n-      cacheLocation: path.resolve(\r\n-        __dirname,\r\n-        \"../node_modules/.cache/.eslintcache\"\r\n-      ),\r\n-    }),\r\n-    new HtmlWebpackPlugin({\r\n-      template: path.resolve(__dirname, \"../public/index.html\"),\r\n-    }),\r\n-    isProduction &&\r\n-      new MiniCssExtractPlugin({\r\n-        filename: \"static/css/[name].[contenthash:10].css\",\r\n-        chunkFilename: \"static/css/[name].[contenthash:10].chunk.css\",\r\n-      }),\r\n-    !isProduction && new ReactRefreshWebpackPlugin(),\r\n-  ].filter(Boolean),\r\n-  optimization: {\r\n-    minimize: isProduction,\r\n-    // 压缩的操作\r\n-    minimizer: [\r\n-      // 压缩css\r\n-      new CssMinimizerPlugin(),\r\n-      // 压缩js\r\n-      new TerserWebpackPlugin(),\r\n-      // 压缩图片\r\n-      new ImageMinimizerPlugin({\r\n-        minimizer: {\r\n-          implementation: ImageMinimizerPlugin.imageminGenerate,\r\n-          options: {\r\n-            plugins: [\r\n-              [\"gifsicle\", { interlaced: true }],\r\n-              [\"jpegtran\", { progressive: true }],\r\n-              [\"optipng\", { optimizationLevel: 5 }],\r\n-              [\r\n-                \"svgo\",\r\n-                {\r\n-                  plugins: [\r\n-                    \"preset-default\",\r\n-                    \"prefixIds\",\r\n-                    {\r\n-                      name: \"sortAttrs\",\r\n-                      params: {\r\n-                        xmlnsOrder: \"alphabetical\",\r\n-                      },\r\n-                    },\r\n-                  ],\r\n-                },\r\n-              ],\r\n-            ],\r\n-          },\r\n-        },\r\n-      }),\r\n-    ],\r\n-    // 代码分割配置\r\n-    splitChunks: {\r\n-      chunks: \"all\",\r\n-      // 其他都用默认值\r\n-    },\r\n-    runtimeChunk: {\r\n-      name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n-    },\r\n-  },\r\n-  resolve: {\r\n-    extensions: [\".jsx\", \".js\", \".json\"],\r\n-  },\r\n-  devServer: {\r\n-    open: true,\r\n-    host: \"localhost\",\r\n-    port: 3000,\r\n-    hot: true,\r\n-    compress: true,\r\n-    historyApiFallback: true,\r\n-  },\r\n-  mode: isProduction ? \"production\" : \"development\",\r\n-  devtool: isProduction ? \"source-map\" : \"cheap-module-source-map\",\r\n-};\n\\ No newline at end of file\n+//合并开发和生产环境，并进行了优化，添加了antd\r\n"
                },
                {
                    "date": 1662387036824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n+\r\n //合并开发和生产环境，并进行了优化，添加了antd\r\n"
                },
                {
                    "date": 1662387144315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,241 @@\n \r\n //合并开发和生产环境，并进行了优化，添加了antd\r\n+const path = require(\"path\");\r\n+const ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\n+const HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\n+const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\n+const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\n+const TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\n+const ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\n+const ReactRefreshWebpackPlugin = require(\"@pmmmwh/react-refresh-webpack-plugin\");\r\n+const CopyPlugin = require(\"copy-webpack-plugin\");\r\n+\r\n+const isProduction = process.env.NODE_ENV === \"production\";\r\n+\r\n+const getStyleLoaders = (preProcessor) => {\r\n+  return [\r\n+    isProduction ? MiniCssExtractPlugin.loader : \"style-loader\",\r\n+    \"css-loader\",\r\n+    {\r\n+      loader: \"postcss-loader\",\r\n+      options: {\r\n+        postcssOptions: {\r\n+          plugins: [\r\n+            \"postcss-preset-env\",\r\n+          ],\r\n+        },\r\n+      },\r\n+    },\r\n+    preProcessor && {\r\n+      loader: preProcessor,\r\n+      options:\r\n+        preProcessor === \"less-loader\"\r\n+          ? {\r\n+              // antd的自定义主题\r\n+              lessOptions: {\r\n+                modifyVars: {\r\n+                  // 其他主题色：https://ant.design/docs/react/customize-theme-cn\r\n+                  \"@primary-color\": \"#1DA57A\", // 全局主色\r\n+                },\r\n+                javascriptEnabled: true,\r\n+              },\r\n+            }\r\n+          : {},\r\n+    },\r\n+  ].filter(Boolean);\r\n+};\r\n+\r\n+module.exports = {\r\n+  entry: \"./src/main.js\",\r\n+  output: {\r\n+    path: isProduction ? path.resolve(__dirname, \"../dist\") : undefined,\r\n+    filename: isProduction\r\n+      ? \"static/js/[name].[contenthash:10].js\"\r\n+      : \"static/js/[name].js\",\r\n+    chunkFilename: isProduction\r\n+      ? \"static/js/[name].[contenthash:10].chunk.js\"\r\n+      : \"static/js/[name].chunk.js\",\r\n+    assetModuleFilename: \"static/js/[hash:10][ext][query]\",\r\n+    clean: true,\r\n+  },\r\n+  module: {\r\n+    rules: [\r\n+      {\r\n+        oneOf: [\r\n+          {\r\n+            test: /\\.css$/,\r\n+            use: getStyleLoaders(),\r\n+          },\r\n+          {\r\n+            test: /\\.less$/,\r\n+            use: getStyleLoaders(\"less-loader\"),\r\n+          },\r\n+          {\r\n+            test: /\\.s[ac]ss$/,\r\n+            use: getStyleLoaders(\"sass-loader\"),\r\n+          },\r\n+          {\r\n+            test: /\\.styl$/,\r\n+            use: getStyleLoaders(\"stylus-loader\"),\r\n+          },\r\n+          {\r\n+            test: /\\.(png|jpe?g|gif|svg)$/,\r\n+            type: \"asset\",\r\n+            parser: {\r\n+              dataUrlCondition: {\r\n+                maxSize: 10 * 1024,\r\n+              },\r\n+            },\r\n+          },\r\n+          {\r\n+            test: /\\.(ttf|woff2?)$/,\r\n+            type: \"asset/resource\",\r\n+          },\r\n+          {\r\n+            test: /\\.(jsx|js)$/,\r\n+            include: path.resolve(__dirname, \"../src\"),\r\n+            loader: \"babel-loader\",\r\n+            options: {\r\n+              cacheDirectory: true,\r\n+              cacheCompression: false,\r\n+              plugins: [\r\n+                // \"@babel/plugin-transform-runtime\",  // presets中包含了\r\n+                !isProduction && \"react-refresh/babel\",\r\n+              ].filter(Boolean),\r\n+            },\r\n+          },\r\n+        ],\r\n+      },\r\n+    ],\r\n+  },\r\n+  plugins: [\r\n+    new ESLintWebpackPlugin({\r\n+      extensions: [\".js\", \".jsx\"],\r\n+      context: path.resolve(__dirname, \"../src\"),\r\n+      exclude: \"node_modules\",\r\n+      cache: true,\r\n+      cacheLocation: path.resolve(\r\n+        __dirname,\r\n+        \"../node_modules/.cache/.eslintcache\"\r\n+      ),\r\n+    }),\r\n+    new HtmlWebpackPlugin({\r\n+      template: path.resolve(__dirname, \"../public/index.html\"),\r\n+    }),\r\n+    isProduction &&\r\n+      new MiniCssExtractPlugin({\r\n+        filename: \"static/css/[name].[contenthash:10].css\",\r\n+        chunkFilename: \"static/css/[name].[contenthash:10].chunk.css\",\r\n+      }),\r\n+    !isProduction && new ReactRefreshWebpackPlugin(),\r\n+    // 将public下面的资源复制到dist目录去（除了index.html）\r\n+    new CopyPlugin({\r\n+      patterns: [\r\n+        {\r\n+          from: path.resolve(__dirname, \"../public\"),\r\n+          to: path.resolve(__dirname, \"../dist\"),\r\n+          toType: \"dir\",\r\n+          noErrorOnMissing: true, // 不生成错误\r\n+          globOptions: {\r\n+            // 忽略文件\r\n+            ignore: [\"**/index.html\"],\r\n+          },\r\n+          info: {\r\n+            // 跳过terser压缩js\r\n+            minimized: true,\r\n+          },\r\n+        },\r\n+      ],\r\n+    }),\r\n+  ].filter(Boolean),\r\n+  optimization: {\r\n+    minimize: isProduction,\r\n+    // 压缩的操作\r\n+    minimizer: [\r\n+      // 压缩css\r\n+      new CssMinimizerPlugin(),\r\n+      // 压缩js\r\n+      new TerserWebpackPlugin(),\r\n+      // 压缩图片\r\n+      new ImageMinimizerPlugin({\r\n+        minimizer: {\r\n+          implementation: ImageMinimizerPlugin.imageminGenerate,\r\n+          options: {\r\n+            plugins: [\r\n+              [\"gifsicle\", { interlaced: true }],\r\n+              [\"jpegtran\", { progressive: true }],\r\n+              [\"optipng\", { optimizationLevel: 5 }],\r\n+              [\r\n+                \"svgo\",\r\n+                {\r\n+                  plugins: [\r\n+                    \"preset-default\",\r\n+                    \"prefixIds\",\r\n+                    {\r\n+                      name: \"sortAttrs\",\r\n+                      params: {\r\n+                        xmlnsOrder: \"alphabetical\",\r\n+                      },\r\n+                    },\r\n+                  ],\r\n+                },\r\n+              ],\r\n+            ],\r\n+          },\r\n+        },\r\n+      }),\r\n+    ],\r\n+    // 代码分割配置\r\n+    splitChunks: {\r\n+      chunks: \"all\",\r\n+      cacheGroups: {\r\n+        // layouts通常是admin项目的主体布局组件，所有路由组件都要使用的\r\n+        // 可以单独打包，从而复用\r\n+        // 如果项目中没有，请删除\r\n+        layouts: {\r\n+          name: \"layouts\",\r\n+          test: path.resolve(__dirname, \"../src/layouts\"),\r\n+          priority: 40,\r\n+        },\r\n+        // 如果项目中使用antd，此时将所有node_modules打包在一起，那么打包输出文件会比较大。\r\n+        // 所以我们将node_modules中比较大的模块单独打包，从而并行加载速度更好\r\n+        // 如果项目中没有，请删除\r\n+        antd: {\r\n+          name: \"chunk-antd\",\r\n+          test: /[\\\\/]node_modules[\\\\/]antd(.*)/,\r\n+          priority: 30,\r\n+        },\r\n+        // 将react相关的库单独打包，减少node_modules的chunk体积。\r\n+        react: {\r\n+          name: \"react\",\r\n+          test: /[\\\\/]node_modules[\\\\/]react(.*)?[\\\\/]/,\r\n+          chunks: \"initial\",\r\n+          priority: 20,\r\n+        },\r\n+        libs: {\r\n+          name: \"chunk-libs\",\r\n+          test: /[\\\\/]node_modules[\\\\/]/,\r\n+          priority: 10, // 权重最低，优先考虑前面内容\r\n+          chunks: \"initial\",\r\n+        },\r\n+      },\r\n+    },\r\n+    runtimeChunk: {\r\n+      name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n+    },\r\n+  },\r\n+  resolve: {\r\n+    extensions: [\".jsx\", \".js\", \".json\"],\r\n+  },\r\n+  devServer: {\r\n+    open: true,\r\n+    host: \"localhost\",\r\n+    port: 3000,\r\n+    hot: true,\r\n+    compress: true,\r\n+    historyApiFallback: true,\r\n+  },\r\n+  mode: isProduction ? \"production\" : \"development\",\r\n+  devtool: isProduction ? \"source-map\" : \"cheap-module-source-map\",\r\n+  performance: false, // 关闭性能分析，提示速度\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1662370960843,
            "name": "Commit-0",
            "content": "//合并开发和生产环境，并进行了优化，加了antd\r\nconst path = require(\"path\");\r\nconst ESLintWebpackPlugin = require(\"eslint-webpack-plugin\");\r\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\r\nconst TerserWebpackPlugin = require(\"terser-webpack-plugin\");\r\nconst ImageMinimizerPlugin = require(\"image-minimizer-webpack-plugin\");\r\nconst ReactRefreshWebpackPlugin = require(\"@pmmmwh/react-refresh-webpack-plugin\");\r\n\r\n// 需要通过 cross-env 定义环境变量\r\nconst isProduction = process.env.NODE_ENV === \"production\";\r\n\r\nconst getStyleLoaders = (preProcessor) => {\r\n  return [\r\n    isProduction ? MiniCssExtractPlugin.loader : \"style-loader\",\r\n    \"css-loader\",\r\n    {\r\n      loader: \"postcss-loader\",\r\n      options: {\r\n        postcssOptions: {\r\n          plugins: [\r\n            \"postcss-preset-env\", // 能解决大多数样式兼容性问题\r\n          ],\r\n        },\r\n      },\r\n    },\r\n    preProcessor,\r\n  ].filter(Boolean);\r\n};\r\n\r\nmodule.exports = {\r\n  entry: \"./src/main.js\",\r\n  output: {\r\n    path: isProduction ? path.resolve(__dirname, \"../dist\") : undefined,\r\n    filename: isProduction\r\n      ? \"static/js/[name].[contenthash:10].js\"\r\n      : \"static/js/[name].js\",\r\n    chunkFilename: isProduction\r\n      ? \"static/js/[name].[contenthash:10].chunk.js\"\r\n      : \"static/js/[name].chunk.js\",\r\n    assetModuleFilename: \"static/js/[hash:10][ext][query]\",\r\n    clean: true,\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        oneOf: [\r\n          {\r\n            // 用来匹配 .css 结尾的文件\r\n            test: /\\.css$/,\r\n            // use 数组里面 Loader 执行顺序是从右到左\r\n            use: getStyleLoaders(),\r\n          },\r\n          {\r\n            test: /\\.less$/,\r\n            use: getStyleLoaders(\"less-loader\"),\r\n          },\r\n          {\r\n            test: /\\.s[ac]ss$/,\r\n            use: getStyleLoaders(\"sass-loader\"),\r\n          },\r\n          {\r\n            test: /\\.styl$/,\r\n            use: getStyleLoaders(\"stylus-loader\"),\r\n          },\r\n          {\r\n            test: /\\.(png|jpe?g|gif|svg)$/,\r\n            type: \"asset\",\r\n            parser: {\r\n              dataUrlCondition: {\r\n                maxSize: 10 * 1024, // 小于10kb的图片会被base64处理\r\n              },\r\n            },\r\n          },\r\n          {\r\n            test: /\\.(ttf|woff2?)$/,\r\n            type: \"asset/resource\",\r\n          },\r\n          {\r\n            test: /\\.(jsx|js)$/,\r\n            include: path.resolve(__dirname, \"../src\"),\r\n            loader: \"babel-loader\",\r\n            options: {\r\n              cacheDirectory: true, // 开启babel编译缓存\r\n              cacheCompression: false, // 缓存文件不要压缩\r\n              plugins: [\r\n                // \"@babel/plugin-transform-runtime\",  // presets中包含了\r\n                !isProduction && \"react-refresh/babel\",\r\n              ].filter(Boolean),\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  plugins: [\r\n    new ESLintWebpackPlugin({\r\n      extensions: [\".js\", \".jsx\"],\r\n      context: path.resolve(__dirname, \"../src\"),\r\n      exclude: \"node_modules\",\r\n      cache: true,\r\n      cacheLocation: path.resolve(\r\n        __dirname,\r\n        \"../node_modules/.cache/.eslintcache\"\r\n      ),\r\n    }),\r\n    new HtmlWebpackPlugin({\r\n      template: path.resolve(__dirname, \"../public/index.html\"),\r\n    }),\r\n    isProduction &&\r\n      new MiniCssExtractPlugin({\r\n        filename: \"static/css/[name].[contenthash:10].css\",\r\n        chunkFilename: \"static/css/[name].[contenthash:10].chunk.css\",\r\n      }),\r\n    !isProduction && new ReactRefreshWebpackPlugin(),\r\n  ].filter(Boolean),\r\n  optimization: {\r\n    minimize: isProduction,\r\n    // 压缩的操作\r\n    minimizer: [\r\n      // 压缩css\r\n      new CssMinimizerPlugin(),\r\n      // 压缩js\r\n      new TerserWebpackPlugin(),\r\n      // 压缩图片\r\n      new ImageMinimizerPlugin({\r\n        minimizer: {\r\n          implementation: ImageMinimizerPlugin.imageminGenerate,\r\n          options: {\r\n            plugins: [\r\n              [\"gifsicle\", { interlaced: true }],\r\n              [\"jpegtran\", { progressive: true }],\r\n              [\"optipng\", { optimizationLevel: 5 }],\r\n              [\r\n                \"svgo\",\r\n                {\r\n                  plugins: [\r\n                    \"preset-default\",\r\n                    \"prefixIds\",\r\n                    {\r\n                      name: \"sortAttrs\",\r\n                      params: {\r\n                        xmlnsOrder: \"alphabetical\",\r\n                      },\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            ],\r\n          },\r\n        },\r\n      }),\r\n    ],\r\n    // 代码分割配置\r\n    splitChunks: {\r\n      chunks: \"all\",\r\n      // 其他都用默认值\r\n    },\r\n    runtimeChunk: {\r\n      name: (entrypoint) => `runtime~${entrypoint.name}`,\r\n    },\r\n  },\r\n  resolve: {\r\n    extensions: [\".jsx\", \".js\", \".json\"],\r\n  },\r\n  devServer: {\r\n    open: true,\r\n    host: \"localhost\",\r\n    port: 3000,\r\n    hot: true,\r\n    compress: true,\r\n    historyApiFallback: true,\r\n  },\r\n  mode: isProduction ? \"production\" : \"development\",\r\n  devtool: isProduction ? \"source-map\" : \"cheap-module-source-map\",\r\n};"
        }
    ]
}